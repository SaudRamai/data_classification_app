-- 002_tags_and_policies.sql
-- Create standardized tags and baseline masking policies

USE DATABASE IDENTIFIER($DATABASE);
CREATE SCHEMA IF NOT EXISTS DATA_GOVERNANCE;

-- Tags with allowed values per policy 5.4.2
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.DATA_CLASSIFICATION ALLOWED_VALUES ('Public','Internal','Restricted','Confidential');
-- App expects numeric CIA values as strings: '0','1','2','3'
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.CONFIDENTIALITY_LEVEL ALLOWED_VALUES ('0','1','2','3');
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.INTEGRITY_LEVEL ALLOWED_VALUES ('0','1','2','3');
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.AVAILABILITY_LEVEL ALLOWED_VALUES ('0','1','2','3');

-- Optional regulatory tags (for Compliance rules)
-- Note: Snowflake TAGs do not support BOOLEAN types; omit type and optionally set allowed values if needed.
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.GDPR;
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.HIPAA;
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.PCI;
CREATE TAG IF NOT EXISTS DATA_GOVERNANCE.SOX;

-- Baseline masking policies (standardized to IS_ROLE_IN_SESSION checks)
CREATE OR REPLACE MASKING POLICY DATA_GOVERNANCE.MASK_REDACT_STRING AS (VAL STRING) RETURNS STRING ->
  CASE
    WHEN IS_ROLE_IN_SESSION('SECURITY_ADMIN') OR IS_ROLE_IN_SESSION('SYSADMIN')
      OR IS_ROLE_IN_SESSION('DATA_OWNER') OR IS_ROLE_IN_SESSION('COMPLIANCE_OFFICER') THEN VAL
    ELSE '***'
  END;

CREATE OR REPLACE MASKING POLICY DATA_GOVERNANCE.MASK_REDACT_NUMBER AS (VAL NUMBER) RETURNS NUMBER ->
  CASE
    WHEN IS_ROLE_IN_SESSION('SECURITY_ADMIN') OR IS_ROLE_IN_SESSION('SYSADMIN')
      OR IS_ROLE_IN_SESSION('DATA_OWNER') OR IS_ROLE_IN_SESSION('COMPLIANCE_OFFICER') THEN VAL
    ELSE 0
  END;

-- Email-friendly masker: keep domain, obfuscate local part
CREATE OR REPLACE MASKING POLICY DATA_GOVERNANCE.MASK_EMAIL AS (VAL STRING) RETURNS STRING ->
  CASE
    WHEN IS_ROLE_IN_SESSION('SECURITY_ADMIN') OR IS_ROLE_IN_SESSION('SYSADMIN')
      OR IS_ROLE_IN_SESSION('DATA_OWNER') OR IS_ROLE_IN_SESSION('COMPLIANCE_OFFICER') THEN VAL
    WHEN VAL IS NULL THEN NULL
    WHEN POSITION('@', VAL) > 1 THEN CONCAT('***', SUBSTR(VAL, POSITION('@', VAL)))
    ELSE '***'
  END;

-- Example higher-sensitivity policy that grants clear-text to a limited role set
CREATE OR REPLACE MASKING POLICY DATA_GOVERNANCE.MASK_CONFIDENTIAL_STRING AS (VAL STRING) RETURNS STRING ->
  CASE
    WHEN IS_ROLE_IN_SESSION('DATA_STEWARD_CONFIDENTIAL') OR IS_ROLE_IN_SESSION('SECURITY_ADMIN') THEN VAL
    ELSE '***'
  END;

-- Helper comments: Apply policies to columns by ALTER TABLE ... MODIFY COLUMN ... SET MASKING POLICY
-- Example:
-- ALTER TABLE DB.SCHEMA.TABLE MODIFY COLUMN EMAIL SET MASKING POLICY DATA_GOVERNANCE.MASK_EMAIL;

-- Tagging helper comments:
-- ALTER TABLE DB.SCHEMA.TABLE SET TAG DATA_GOVERNANCE.DATA_CLASSIFICATION = 'Restricted';
-- ALTER TABLE DB.SCHEMA.TABLE SET TAG DATA_GOVERNANCE.CONFIDENTIALITY_LEVEL = '2';  -- Allowed values: '0','1','2','3'
