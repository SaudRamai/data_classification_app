-- 004_rbac_scaffolding.sql
-- RBAC scaffolding aligned to classification levels

-- NOTE: Replace $DATABASE and $WAREHOUSE at runtime or set via session
USE DATABASE IDENTIFIER($DATABASE);
-- Use appropriate admin role for creating roles and managing grants
USE ROLE SECURITYADMIN;

-- Core roles by sensitivity tier
CREATE ROLE IF NOT EXISTS ROLE_PUBLIC_VIEWER;
CREATE ROLE IF NOT EXISTS ROLE_INTERNAL_USER;
CREATE ROLE IF NOT EXISTS ROLE_RESTRICTED_ANALYST;
CREATE ROLE IF NOT EXISTS ROLE_CONFIDENTIAL_OWNER;
CREATE ROLE IF NOT EXISTS DATA_STEWARD_CONFIDENTIAL; -- used by high-sensitivity masking policy bypass

-- Organizational roles (who the user is) — mapped to sensitivity roles (what they can see)
CREATE ROLE IF NOT EXISTS ROLE_DATA_CONSUMER;   -- typical business users
CREATE ROLE IF NOT EXISTS ROLE_DATA_OWNER;      -- business owners approving classifications
CREATE ROLE IF NOT EXISTS ROLE_DATA_CUSTODIAN;  -- technical implementers (tags/masks/grants)
CREATE ROLE IF NOT EXISTS ROLE_CDO_ADMIN;       -- oversight/reporting across governance

-- Safe inheritance (C0–C2 only). Keep Confidential (C3) separate; steward is independent.
GRANT ROLE ROLE_PUBLIC_VIEWER    TO ROLE ROLE_INTERNAL_USER;
GRANT ROLE ROLE_INTERNAL_USER    TO ROLE ROLE_RESTRICTED_ANALYST;

-- Map organizational roles to sensitivity roles conservatively
-- Data Consumers can access Public/Internal by default
GRANT ROLE ROLE_PUBLIC_VIEWER    TO ROLE ROLE_DATA_CONSUMER;
GRANT ROLE ROLE_INTERNAL_USER    TO ROLE ROLE_DATA_CONSUMER;
-- If a subset of consumers need Restricted (C2), grant ROLE_RESTRICTED_ANALYST to a separate group/role, not broadly
-- GRANT ROLE ROLE_RESTRICTED_ANALYST TO ROLE ROLE_DATA_CONSUMER;  -- (intentionally commented; assign selectively)

-- Data Owners focus on governance actions; do not auto-grant broad Confidential read
GRANT ROLE ROLE_INTERNAL_USER    TO ROLE ROLE_DATA_OWNER;     -- baseline analytics access
-- For domain-specific Confidential objects, grant ROLE_CONFIDENTIAL_OWNER to named owners per-domain only
-- GRANT ROLE ROLE_CONFIDENTIAL_OWNER TO ROLE ROLE_DATA_OWNER;  -- (avoid global; assign per-domain)

-- Data Custodians implement controls; they may need elevated rights during changes (via SECADMIN outside this script)
GRANT ROLE ROLE_INTERNAL_USER    TO ROLE ROLE_DATA_CUSTODIAN;

-- CDO Admins: oversight/reporting across governance — avoid broad write to prod data
GRANT ROLE ROLE_INTERNAL_USER    TO ROLE ROLE_CDO_ADMIN;

-- Warehouses
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_PUBLIC_VIEWER;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_INTERNAL_USER;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_RESTRICTED_ANALYST;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_CONFIDENTIAL_OWNER;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE DATA_STEWARD_CONFIDENTIAL;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_DATA_CONSUMER;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_DATA_OWNER;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_DATA_CUSTODIAN;
GRANT USAGE ON WAREHOUSE IDENTIFIER($WAREHOUSE) TO ROLE ROLE_CDO_ADMIN;

-- Governance schema access
CREATE SCHEMA IF NOT EXISTS DATA_GOVERNANCE;
GRANT USAGE ON SCHEMA DATA_GOVERNANCE TO ROLE ROLE_INTERNAL_USER;
GRANT SELECT ON ALL TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_INTERNAL_USER;
GRANT SELECT ON FUTURE TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_INTERNAL_USER;
-- Organizational roles governance visibility
GRANT USAGE ON SCHEMA DATA_GOVERNANCE TO ROLE ROLE_DATA_OWNER;
GRANT USAGE ON SCHEMA DATA_GOVERNANCE TO ROLE ROLE_DATA_CUSTODIAN;
GRANT USAGE ON SCHEMA DATA_GOVERNANCE TO ROLE ROLE_CDO_ADMIN;
GRANT SELECT ON ALL TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_DATA_OWNER;
GRANT SELECT ON ALL TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_DATA_CUSTODIAN;
GRANT SELECT ON ALL TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_CDO_ADMIN;
GRANT SELECT ON FUTURE TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_DATA_OWNER;
GRANT SELECT ON FUTURE TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_DATA_CUSTODIAN;
GRANT SELECT ON FUTURE TABLES IN SCHEMA DATA_GOVERNANCE TO ROLE ROLE_CDO_ADMIN;

-- Minimal grants examples (to be adjusted per business context):
-- Public (C0)
--   Grant read access to ROLE_PUBLIC_VIEWER
-- Internal (C1)
--   Grant read to ROLE_INTERNAL_USER
-- Restricted (C2)
--   Grant read to ROLE_RESTRICTED_ANALYST and above; apply masking policies to sensitive columns
-- Confidential (C3)
--   Grant read to ROLE_CONFIDENTIAL_OWNER only; fewer users; elevated approvals; strong masking policies

-- Example: applying grants by pattern (customize SCHEMA names)
-- GRANT USAGE ON SCHEMA ANALYTICS.PUBLIC TO ROLE ROLE_PUBLIC_VIEWER;
-- GRANT SELECT ON ALL VIEWS IN SCHEMA ANALYTICS.PUBLIC TO ROLE ROLE_PUBLIC_VIEWER;
-- GRANT SELECT ON FUTURE VIEWS IN SCHEMA ANALYTICS.PUBLIC TO ROLE ROLE_PUBLIC_VIEWER;

-- For confidential datasets, restrict to owners/stewards only
-- GRANT USAGE ON SCHEMA FINANCE.CONFIDENTIAL TO ROLE ROLE_CONFIDENTIAL_OWNER;
-- GRANT SELECT ON ALL TABLES IN SCHEMA FINANCE.CONFIDENTIAL TO ROLE ROLE_CONFIDENTIAL_OWNER;
-- GRANT SELECT ON FUTURE TABLES IN SCHEMA FINANCE.CONFIDENTIAL TO ROLE ROLE_CONFIDENTIAL_OWNER;

-- Masking policies rely on CURRENT_ROLE() checks including DATA_STEWARD_CONFIDENTIAL
-- Ensure intended stewards have that role assigned at the user or parent role level.

-- =============================================================
-- Additional Grant Templates (fill placeholders or set session variables)
-- Purpose: avoid common issues where roles have WAREHOUSE but lack DB/SCHEMA USAGE/SELECT
-- =============================================================

-- Database usage for sensitivity roles
GRANT USAGE ON DATABASE IDENTIFIER($DATABASE) TO ROLE ROLE_PUBLIC_VIEWER;
GRANT USAGE ON DATABASE IDENTIFIER($DATABASE) TO ROLE ROLE_INTERNAL_USER;
GRANT USAGE ON DATABASE IDENTIFIER($DATABASE) TO ROLE ROLE_RESTRICTED_ANALYST;
GRANT USAGE ON DATABASE IDENTIFIER($DATABASE) TO ROLE ROLE_CONFIDENTIAL_OWNER;

-- Example schemas by tier (set your schema names):
--   SET SCHEMA_PUBLIC = 'PUBLIC';
--   SET SCHEMA_INTERNAL = 'INTERNAL';
--   SET SCHEMA_RESTRICTED = 'RESTRICTED';
--   SET SCHEMA_CONFIDENTIAL = 'CONFIDENTIAL';

-- C0: PUBLIC access
-- GRANT USAGE ON SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_PUBLIC) TO ROLE ROLE_PUBLIC_VIEWER;
-- GRANT SELECT ON ALL TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_PUBLIC) TO ROLE ROLE_PUBLIC_VIEWER;
-- GRANT SELECT ON ALL VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_PUBLIC) TO ROLE ROLE_PUBLIC_VIEWER;
-- GRANT SELECT ON FUTURE TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_PUBLIC) TO ROLE ROLE_PUBLIC_VIEWER;
-- GRANT SELECT ON FUTURE VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_PUBLIC) TO ROLE ROLE_PUBLIC_VIEWER;

-- C1: INTERNAL access
-- GRANT USAGE ON SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_INTERNAL) TO ROLE ROLE_INTERNAL_USER;
-- GRANT SELECT ON ALL TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_INTERNAL) TO ROLE ROLE_INTERNAL_USER;
-- GRANT SELECT ON ALL VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_INTERNAL) TO ROLE ROLE_INTERNAL_USER;
-- GRANT SELECT ON FUTURE TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_INTERNAL) TO ROLE ROLE_INTERNAL_USER;
-- GRANT SELECT ON FUTURE VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_INTERNAL) TO ROLE ROLE_INTERNAL_USER;

-- C2: RESTRICTED access
-- GRANT USAGE ON SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_RESTRICTED) TO ROLE ROLE_RESTRICTED_ANALYST;
-- GRANT SELECT ON ALL TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_RESTRICTED) TO ROLE ROLE_RESTRICTED_ANALYST;
-- GRANT SELECT ON ALL VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_RESTRICTED) TO ROLE ROLE_RESTRICTED_ANALYST;
-- GRANT SELECT ON FUTURE TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_RESTRICTED) TO ROLE ROLE_RESTRICTED_ANALYST;
-- GRANT SELECT ON FUTURE VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_RESTRICTED) TO ROLE ROLE_RESTRICTED_ANALYST;
-- (Ensure masking policies are applied to sensitive columns in these schemas)

-- C3: CONFIDENTIAL access
-- GRANT USAGE ON SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_CONFIDENTIAL) TO ROLE ROLE_CONFIDENTIAL_OWNER;
-- GRANT SELECT ON ALL TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_CONFIDENTIAL) TO ROLE ROLE_CONFIDENTIAL_OWNER;
-- GRANT SELECT ON ALL VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_CONFIDENTIAL) TO ROLE ROLE_CONFIDENTIAL_OWNER;
-- GRANT SELECT ON FUTURE TABLES IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_CONFIDENTIAL) TO ROLE ROLE_CONFIDENTIAL_OWNER;
-- GRANT SELECT ON FUTURE VIEWS  IN SCHEMA IDENTIFIER($DATABASE||'.'||$SCHEMA_CONFIDENTIAL) TO ROLE ROLE_CONFIDENTIAL_OWNER;
-- (Do NOT grant ROLE_CONFIDENTIAL_OWNER broadly; assign per domain/BU)
