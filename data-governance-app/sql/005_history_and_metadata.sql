-- 005_history_and_metadata.sql
-- Create history, metadata, and policy/framework scaffolding required by AI/ML-driven classification

USE DATABASE IDENTIFIER($DATABASE);

-- Schemas
CREATE SCHEMA IF NOT EXISTS CLASSIFICATION_HISTORY;
CREATE SCHEMA IF NOT EXISTS CLASSIFICATION_METADATA;
CREATE SCHEMA IF NOT EXISTS DATA_GOVERNANCE;

-- History of AI/Manual classifications
CREATE TABLE IF NOT EXISTS CLASSIFICATION_HISTORY.CLASSIFICATION_HISTORY (
  ID STRING,
  ASSET_FULL_NAME STRING,
  COLUMN_NAME STRING,
  SOURCE STRING,                 -- SYSTEM_CLASSIFY, AI_SNOWPARK, MANUAL
  DECISION_BY STRING,            -- user or system
  DECISION_AT TIMESTAMP_NTZ,
  LABEL STRING,                  -- Public/Internal/Restricted/Confidential
  C NUMBER,
  I NUMBER,
  A NUMBER,
  CONFIDENCE FLOAT,
  SENSITIVE_CATEGORIES ARRAY,    -- ['PII','PHI','Financial','Custom']
  DETAILS VARIANT
);

-- Review schedules mirror (for cross-schema updates)
CREATE TABLE IF NOT EXISTS CLASSIFICATION_HISTORY.REVIEW_SCHEDULES (
  ID STRING,
  ASSET_FULL_NAME STRING,
  FREQUENCY STRING,
  NEXT_RUN TIMESTAMP_NTZ,
  LAST_RUN TIMESTAMP_NTZ,
  OWNER STRING,
  ACTIVE BOOLEAN
);

-- Allowed tag values registry
CREATE TABLE IF NOT EXISTS CLASSIFICATION_METADATA.ALLOWED_TAG_VALUES (
  TAG_NAME STRING,
  ALLOWED_VALUE STRING,
  PRIMARY KEY (TAG_NAME, ALLOWED_VALUE)
);

-- Seed defaults if empty
INSERT INTO CLASSIFICATION_METADATA.ALLOWED_TAG_VALUES (TAG_NAME, ALLOWED_VALUE)
SELECT * FROM VALUES
  ('DATA_CLASSIFICATION','Public'),
  ('DATA_CLASSIFICATION','Internal'),
  ('DATA_CLASSIFICATION','Restricted'),
  ('DATA_CLASSIFICATION','Confidential'),
  ('CONFIDENTIALITY_LEVEL','0'),('CONFIDENTIALITY_LEVEL','1'),('CONFIDENTIALITY_LEVEL','2'),('CONFIDENTIALITY_LEVEL','3'),
  ('INTEGRITY_LEVEL','0'),('INTEGRITY_LEVEL','1'),('INTEGRITY_LEVEL','2'),('INTEGRITY_LEVEL','3'),
  ('AVAILABILITY_LEVEL','0'),('AVAILABILITY_LEVEL','1'),('AVAILABILITY_LEVEL','2'),('AVAILABILITY_LEVEL','3')
WHERE NOT EXISTS (
  SELECT 1 FROM CLASSIFICATION_METADATA.ALLOWED_TAG_VALUES
);

-- Governance tables not covered previously
CREATE TABLE IF NOT EXISTS DATA_GOVERNANCE.FRAMEWORKS (
  ID STRING,
  NAME STRING,
  VERSION STRING,
  EFFECTIVE_DATE DATE,
  NEXT_REVIEW_DATE DATE,
  OWNER STRING,
  CREATED_AT TIMESTAMP_NTZ
);

CREATE TABLE IF NOT EXISTS DATA_GOVERNANCE.POLICIES (
  ID STRING,
  FRAMEWORK STRING,         -- references FRAMEWORKS.NAME
  RULE_CODE STRING,         -- short code
  RULE_TEXT STRING,         -- human-readable rule
  CATEGORY STRING,          -- PII/PHI/Financial/Auth/Other
  MIN_CONFIDENTIALITY NUMBER,
  REQUIRE_MASKING BOOLEAN,
  REQUIRE_ROW_ACCESS BOOLEAN,
  CREATED_AT TIMESTAMP_NTZ,
  SOURCE STRING,            -- AI_NLP, MANUAL, IMPORT
  DETAILS VARIANT
);

CREATE TABLE IF NOT EXISTS DATA_GOVERNANCE.EXCEPTIONS (
  ID STRING,
  ASSET_FULL_NAME STRING,
  FRAMEWORK STRING,
  RULE_CODE STRING,
  REASON STRING,
  EXPIRES_AT DATE,
  CREATED_AT TIMESTAMP_NTZ,
  CREATED_BY STRING,
  DETAILS VARIANT
);

CREATE TABLE IF NOT EXISTS DATA_GOVERNANCE.RECLASSIFICATION_REQUESTS (
  ID STRING,
  ASSET_FULL_NAME STRING,
  REQUESTED_BY STRING,
  CURRENT_LABEL STRING,
  REQUESTED_LABEL STRING,
  RATIONALE STRING,
  STATUS STRING,            -- Submitted/Approved/Rejected/Applied
  CREATED_AT TIMESTAMP_NTZ,
  UPDATED_AT TIMESTAMP_NTZ,
  DETAILS VARIANT
);

-- Optional queue table (in addition to existing VIEW)
CREATE TABLE IF NOT EXISTS DATA_GOVERNANCE.CLASSIFICATION_QUEUE (
  ID STRING,
  ASSET_FULL_NAME STRING,
  COLUMN_NAME STRING,
  REASON STRING,            -- UNCLASSIFIED / LOW_CONFIDENCE / CONFLICT
  SUGGESTED_LABEL STRING,
  CONFIDENCE FLOAT,
  SENSITIVE_CATEGORIES ARRAY,
  CREATED_AT TIMESTAMP_NTZ,
  DETAILS VARIANT
);

-- =============================================
-- Classification Metadata (Scan results, AI suggestions, compliance mapping)
-- =============================================

-- Dynamic detection dictionaries
CREATE TABLE IF NOT EXISTS CLASSIFICATION_METADATA.DETECTION_KEYWORDS (
  TAG STRING,           -- e.g., 'PII','PHI','Financial','Auth'
  KEYWORD STRING,       -- token to match in column names
  WEIGHT FLOAT          -- influence on confidence (0..1)
);

CREATE TABLE IF NOT EXISTS CLASSIFICATION_METADATA.DETECTION_PATTERNS (
  TAG STRING,           -- e.g., 'PII','PHI','Financial','Auth'
  REGEX STRING,         -- Snowflake-compatible regex
  WEIGHT FLOAT          -- influence on confidence (0..1)
);

-- Seed a few defaults if empty (idempotent)
INSERT INTO CLASSIFICATION_METADATA.DETECTION_KEYWORDS(TAG, KEYWORD, WEIGHT)
SELECT * FROM VALUES
  ('PII','EMAIL',0.6),('PII','PHONE',0.6),('PII','SSN',0.8),('PII','DOB',0.6),('PII','ADDRESS',0.6),
  ('Financial','INVOICE',0.6),('Financial','LEDGER',0.7),('Financial','PAYROLL',0.7),
  ('Auth','PASSWORD',0.8),('Auth','TOKEN',0.8),('Auth','API_KEY',0.9)
WHERE NOT EXISTS (SELECT 1 FROM CLASSIFICATION_METADATA.DETECTION_KEYWORDS);

INSERT INTO CLASSIFICATION_METADATA.DETECTION_PATTERNS(TAG, REGEX, WEIGHT)
SELECT * FROM VALUES
  ('PII','^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$',0.8), -- email
  ('PII','^\+?[0-9\-()\s]{7,}$',0.7),                           -- phone
  ('PII','^\d{3}-?\d{2}-?\d{4}$',0.9),                          -- SSN
  ('Financial','^[0-9]{13,19}$',0.7)                              -- card-like
WHERE NOT EXISTS (SELECT 1 FROM CLASSIFICATION_METADATA.DETECTION_PATTERNS);

-- 1) View to expose simple scan results contract for app integrations
--    Columns: table_name, column_name, detected_type, scan_date
CREATE OR REPLACE VIEW CLASSIFICATION_METADATA.SCAN_RESULTS AS
SELECT
  ASSET_FULL_NAME   AS TABLE_NAME,
  COLUMN_NAME       AS COLUMN_NAME,
  SIGNAL_TYPE       AS DETECTED_TYPE,
  TO_DATE(DETECTED_AT) AS SCAN_DATE,
  SOURCE,
  CONFIDENCE
FROM DATA_GOVERNANCE.ASSET_SIGNALS;

-- 2) Mapping detected types to SOC2/SOX2 categories
CREATE TABLE IF NOT EXISTS CLASSIFICATION_METADATA.TYPE_TO_COMPLIANCE (
  DETECTED_TYPE STRING,
  SOC2_CATEGORY STRING,
  SOX2_CATEGORY STRING
);

-- Seed minimal defaults (idempotent)
INSERT INTO CLASSIFICATION_METADATA.TYPE_TO_COMPLIANCE (DETECTED_TYPE, SOC2_CATEGORY, SOX2_CATEGORY)
SELECT * FROM VALUES
  ('PII','Confidentiality','Financial Reporting'),
  ('PHI','Confidentiality','Financial Reporting'),
  ('PCI','Confidentiality','Financial Reporting'),
  ('Financial','Processing Integrity','Financial Reporting'),
  ('Auth','Security','Security'),
  ('Email','Confidentiality','Financial Reporting'),
  ('Phone','Confidentiality','Financial Reporting'),
  ('SSN_US','Confidentiality','Financial Reporting')
WHERE NOT EXISTS (
  SELECT 1 FROM CLASSIFICATION_METADATA.TYPE_TO_COMPLIANCE
);

-- 3) View joining scan results with compliance mapping
CREATE OR REPLACE VIEW CLASSIFICATION_METADATA.SCAN_RESULTS_WITH_COMPLIANCE AS
SELECT
  r.TABLE_NAME,
  r.COLUMN_NAME,
  r.DETECTED_TYPE,
  r.SCAN_DATE,
  m.SOC2_CATEGORY,
  m.SOX2_CATEGORY
FROM CLASSIFICATION_METADATA.SCAN_RESULTS r
LEFT JOIN CLASSIFICATION_METADATA.TYPE_TO_COMPLIANCE m
  ON UPPER(m.DETECTED_TYPE) = UPPER(r.DETECTED_TYPE);

-- 4) AI suggestions store (table-level or column-level)
CREATE TABLE IF NOT EXISTS CLASSIFICATION_METADATA.AI_SUGGESTIONS (
  TABLE_NAME STRING,
  COLUMN_NAME STRING,
  SUGGESTED_LABEL STRING,      -- Public | Internal | Restricted | Confidential
  CONFIDENCE FLOAT,
  SUGGESTED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  DETAILS VARIANT
);

-- 5) Convenience view to present latest AI suggestion per table/column with scan + compliance
CREATE OR REPLACE VIEW CLASSIFICATION_METADATA.CLASSIFICATION_METADATA AS
WITH latest_ai AS (
  SELECT *,
         ROW_NUMBER() OVER (PARTITION BY TABLE_NAME, COALESCE(COLUMN_NAME,'') ORDER BY SUGGESTED_AT DESC) AS RN
  FROM CLASSIFICATION_METADATA.AI_SUGGESTIONS
)
SELECT
  r.TABLE_NAME,
  r.COLUMN_NAME,
  r.DETECTED_TYPE,
  r.SCAN_DATE,
  r.SOC2_CATEGORY,
  r.SOX2_CATEGORY,
  r.SOURCE,
  r.CONFIDENCE AS DETECTION_CONFIDENCE,
  a.SUGGESTED_LABEL,
  a.CONFIDENCE,
  a.SUGGESTED_AT,
  a.DETAILS
FROM CLASSIFICATION_METADATA.SCAN_RESULTS_WITH_COMPLIANCE r
LEFT JOIN latest_ai a
  ON a.TABLE_NAME = r.TABLE_NAME AND COALESCE(a.COLUMN_NAME,'') = COALESCE(r.COLUMN_NAME,'') AND a.RN = 1;

-- Unified JSON per (table, column): category, compliance, confidence (aggregated), evidence and masking status
CREATE OR REPLACE VIEW CLASSIFICATION_METADATA.COLUMN_SUMMARY_JSON AS
WITH base AS (
  SELECT r.TABLE_NAME, r.COLUMN_NAME,
         r.DETECTED_TYPE,
         r.SOC2_CATEGORY, r.SOX2_CATEGORY,
         r.SOURCE,
         COALESCE(r.CONFIDENCE, 0.0) AS DETECT_CONF,
         a.SUGGESTED_LABEL,
         COALESCE(a.CONFIDENCE, 0.0) AS AI_CONF
  FROM CLASSIFICATION_METADATA.SCAN_RESULTS_WITH_COMPLIANCE r
  LEFT JOIN (
    SELECT * FROM (
      SELECT TABLE_NAME, COALESCE(COLUMN_NAME,'') AS COL, SUGGESTED_LABEL, CONFIDENCE,
             ROW_NUMBER() OVER (PARTITION BY TABLE_NAME, COALESCE(COLUMN_NAME,'') ORDER BY SUGGESTED_AT DESC) RN
      FROM CLASSIFICATION_METADATA.AI_SUGGESTIONS
    ) WHERE RN = 1
  ) a
  ON a.TABLE_NAME = r.TABLE_NAME AND a.COL = COALESCE(r.COLUMN_NAME,'')
), conf AS (
  SELECT *, (1 - ((1 - DETECT_CONF) * (1 - AI_CONF))) AS CONF_AGG
  FROM base
), mask AS (
  SELECT OBJECT_DATABASE||'.'||OBJECT_SCHEMA||'.'||OBJECT_NAME AS FULL_NAME,
         COLUMN_NAME, 1 AS HAS_MASK
  FROM SNOWFLAKE.ACCOUNT_USAGE.POLICY_REFERENCES
  WHERE POLICY_KIND = 'MASKING_POLICY' AND DELETED IS NULL
)
SELECT OBJECT_CONSTRUCT(
  'table', c.TABLE_NAME,
  'column', c.COLUMN_NAME,
  'category', c.DETECTED_TYPE,
  'soc2', c.SOC2_CATEGORY,
  'sox2', c.SOX2_CATEGORY,
  'label_ai', c.SUGGESTED_LABEL,
  'confidence', ROUND(c.CONF_AGG, 3),
  'has_masking', COALESCE(m.HAS_MASK, 0)
) AS SUMMARY
FROM conf c
LEFT JOIN mask m
  ON m.FULL_NAME = c.TABLE_NAME AND ((m.COLUMN_NAME = c.COLUMN_NAME) OR (m.COLUMN_NAME IS NULL AND c.COLUMN_NAME IS NULL));
