-- 007_seed_policies.sql
-- Seed example frameworks and AI-extracted policy rules (minimal set)

USE DATABASE IDENTIFIER($DATABASE);

CREATE SCHEMA IF NOT EXISTS DATA_GOVERNANCE;

-- Frameworks
INSERT INTO DATA_GOVERNANCE.FRAMEWORKS (ID, NAME, VERSION, EFFECTIVE_DATE, NEXT_REVIEW_DATE, OWNER, CREATED_AT)
SELECT UUID_STRING(), NAME, VERSION, CURRENT_DATE, DATEADD('month', 6, CURRENT_DATE), 'governance@system', CURRENT_TIMESTAMP
FROM (
  SELECT 'GDPR' AS NAME, '1.0' AS VERSION UNION ALL
  SELECT 'HIPAA', '1.0' UNION ALL
  SELECT 'PCI-DSS', '4.0' UNION ALL
  SELECT 'SOX', '1.0' UNION ALL
  SELECT 'CCPA', '1.0' UNION ALL
  SELECT 'DPDP', '1.0'
) s
WHERE NOT EXISTS (
  SELECT 1 FROM DATA_GOVERNANCE.FRAMEWORKS f WHERE UPPER(f.NAME) = UPPER(s.NAME)
);

-- Policies (AI/NLP extracted minimal rules)
-- PII rules (GDPR/CCPA/DPDP)
INSERT INTO DATA_GOVERNANCE.POLICIES (ID, FRAMEWORK, RULE_CODE, RULE_TEXT, CATEGORY, MIN_CONFIDENTIALITY, REQUIRE_MASKING, REQUIRE_ROW_ACCESS, CREATED_AT, SOURCE, DETAILS)
SELECT UUID_STRING(), fw.NAME, 'PII_MIN', 'PII requires at least Restricted (C2) and masking', 'PII', 2, TRUE, FALSE, CURRENT_TIMESTAMP, 'AI_NLP', NULL
FROM DATA_GOVERNANCE.FRAMEWORKS fw
WHERE UPPER(fw.NAME) IN ('GDPR','CCPA','DPDP')
  AND NOT EXISTS (
    SELECT 1 FROM DATA_GOVERNANCE.POLICIES p WHERE UPPER(p.FRAMEWORK)=UPPER(fw.NAME) AND p.RULE_CODE='PII_MIN'
  );

-- PHI rules (HIPAA)
INSERT INTO DATA_GOVERNANCE.POLICIES (ID, FRAMEWORK, RULE_CODE, RULE_TEXT, CATEGORY, MIN_CONFIDENTIALITY, REQUIRE_MASKING, REQUIRE_ROW_ACCESS, CREATED_AT, SOURCE, DETAILS)
SELECT UUID_STRING(), fw.NAME, 'PHI_MIN', 'PHI requires at least Restricted (C2) and masking', 'PHI', 2, TRUE, FALSE, CURRENT_TIMESTAMP, 'AI_NLP', NULL
FROM DATA_GOVERNANCE.FRAMEWORKS fw
WHERE UPPER(fw.NAME) = 'HIPAA'
  AND NOT EXISTS (
    SELECT 1 FROM DATA_GOVERNANCE.POLICIES p WHERE UPPER(p.FRAMEWORK)=UPPER(fw.NAME) AND p.RULE_CODE='PHI_MIN'
  );

-- Financial/SOX rules (SOX)
INSERT INTO DATA_GOVERNANCE.POLICIES (ID, FRAMEWORK, RULE_CODE, RULE_TEXT, CATEGORY, MIN_CONFIDENTIALITY, REQUIRE_MASKING, REQUIRE_ROW_ACCESS, CREATED_AT, SOURCE, DETAILS)
SELECT UUID_STRING(), fw.NAME, 'FIN_MIN', 'Financial data requires Confidential (C3) and masking or row access controls', 'FINANCIAL', 3, TRUE, TRUE, CURRENT_TIMESTAMP, 'AI_NLP', NULL
FROM DATA_GOVERNANCE.FRAMEWORKS fw
WHERE UPPER(fw.NAME) = 'SOX'
  AND NOT EXISTS (
    SELECT 1 FROM DATA_GOVERNANCE.POLICIES p WHERE UPPER(p.FRAMEWORK)=UPPER(fw.NAME) AND p.RULE_CODE='FIN_MIN'
  );

-- PCI cardholder data rules (PCI-DSS)
INSERT INTO DATA_GOVERNANCE.POLICIES (ID, FRAMEWORK, RULE_CODE, RULE_TEXT, CATEGORY, MIN_CONFIDENTIALITY, REQUIRE_MASKING, REQUIRE_ROW_ACCESS, CREATED_AT, SOURCE, DETAILS)
SELECT UUID_STRING(), fw.NAME, 'PCI_MIN', 'PCI cardholder data requires Confidential (C3) and masking', 'FINANCIAL', 3, TRUE, FALSE, CURRENT_TIMESTAMP, 'AI_NLP', NULL
FROM DATA_GOVERNANCE.FRAMEWORKS fw
WHERE UPPER(fw.NAME) = 'PCI-DSS'
  AND NOT EXISTS (
    SELECT 1 FROM DATA_GOVERNANCE.POLICIES p WHERE UPPER(p.FRAMEWORK)=UPPER(fw.NAME) AND p.RULE_CODE='PCI_MIN'
  );
