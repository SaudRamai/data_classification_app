-- =====================================================
-- ✅ Fixed Sensitivity Configuration for AI Assistant
-- Core tables for sensitive data detection and classification
-- =====================================================

-- 1️⃣ Create Database and Schema
CREATE DATABASE IF NOT EXISTS DATA_CLASSIFICATION_DB;
USE DATABASE DATA_CLASSIFICATION_DB;

-- Create Governance Schema
CREATE SCHEMA IF NOT EXISTS DATA_CLASSIFICATION_GOVERNANCE;
USE SCHEMA DATA_CLASSIFICATION_GOVERNANCE;

-- =====================================================
-- ✅ Core Tables for Sensitive Data Detection
-- =====================================================

-- SENSITIVITY_WEIGHTS - Controls scoring for different sensitivity types
CREATE OR REPLACE TABLE SENSITIVITY_WEIGHTS (
    WEIGHT_ID STRING PRIMARY KEY,
    SENSITIVITY_TYPE STRING NOT NULL,
    WEIGHT FLOAT NOT NULL,
    DESCRIPTION STRING,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1
);

-- SENSITIVITY_THRESHOLDS - Classification thresholds for different confidence levels
CREATE OR REPLACE TABLE SENSITIVITY_THRESHOLDS (
    THRESHOLD_ID STRING PRIMARY KEY,
    THRESHOLD_NAME STRING NOT NULL,
    CONFIDENCE_LEVEL FLOAT NOT NULL,
    SENSITIVITY_LEVEL STRING NOT NULL,
    DESCRIPTION STRING,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1
);

-- SENSITIVITY_MODEL_CONFIG - Configuration for ML models used in classification
CREATE OR REPLACE TABLE SENSITIVITY_MODEL_CONFIG (
    MODEL_ID STRING PRIMARY KEY,
    MODEL_NAME STRING NOT NULL,
    MODEL_VERSION STRING NOT NULL,
    MODEL_TYPE STRING NOT NULL,
    CONFIGURATION VARIANT,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1
);

-- SENSITIVITY_CATEGORIES - Defines different categories of sensitive data
CREATE OR REPLACE TABLE SENSITIVITY_CATEGORIES (
    CATEGORY_ID STRING PRIMARY KEY,
    CATEGORY_NAME STRING NOT NULL,
    DESCRIPTION STRING,
    CONFIDENTIALITY_LEVEL NUMBER(1,0) DEFAULT 1,
    INTEGRITY_LEVEL NUMBER(1,0) DEFAULT 1,
    AVAILABILITY_LEVEL NUMBER(1,0) DEFAULT 1,
    DETECTION_THRESHOLD FLOAT DEFAULT 0.5,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY STRING NOT NULL,
    CREATED_AT TIMESTAMP_NTZ NOT NULL,
    UPDATED_BY STRING,
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1
);

-- SENSITIVE_PATTERNS - Regular expressions for pattern matching sensitive data
CREATE OR REPLACE TABLE SENSITIVE_PATTERNS (
    PATTERN_ID STRING PRIMARY KEY,
    CATEGORY_ID STRING NOT NULL,
    PATTERN_NAME STRING NOT NULL,
    PATTERN_STRING STRING NOT NULL,
    DESCRIPTION STRING,
    SENSITIVITY_WEIGHT FLOAT DEFAULT 0.5,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1,
    FOREIGN KEY (CATEGORY_ID) REFERENCES SENSITIVITY_CATEGORIES(CATEGORY_ID)
);

-- SENSITIVE_KEYWORDS - Keywords for identifying sensitive data
CREATE OR REPLACE TABLE SENSITIVE_KEYWORDS (
    KEYWORD_ID STRING PRIMARY KEY,
    CATEGORY_ID STRING NOT NULL,
    KEYWORD_STRING STRING NOT NULL,
    MATCH_TYPE STRING DEFAULT 'EXACT', -- EXACT, FUZZY, CONTAINS
    SENSITIVITY_WEIGHT FLOAT DEFAULT 0.5,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1,
    FOREIGN KEY (CATEGORY_ID) REFERENCES SENSITIVITY_CATEGORIES(CATEGORY_ID)
);

-- SENSITIVE_BUNDLES - Groups of columns that together indicate sensitive data
CREATE OR REPLACE TABLE SENSITIVE_BUNDLES (
    BUNDLE_ID STRING PRIMARY KEY,
    BUNDLE_NAME STRING NOT NULL,
    DESCRIPTION STRING,
    COLUMNS VARIANT, -- JSON array of column patterns
    MIN_MATCH_COUNT INTEGER DEFAULT 1,
    CONFIDENCE_BOOST FLOAT DEFAULT 0.1,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1
);

-- Note: Internal patterns are now handled by SENSITIVE_PATTERNS with is_negative = true

-- COMPLIANCE_MAPPING - Maps sensitivity categories to compliance requirements
CREATE OR REPLACE TABLE COMPLIANCE_MAPPING (
    MAPPING_ID STRING PRIMARY KEY,
    CATEGORY_ID STRING NOT NULL,
    COMPLIANCE_STANDARD STRING NOT NULL,
    REQUIREMENT_IDS VARIANT, -- JSON array of requirement IDs
    DESCRIPTION STRING,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1,
    FOREIGN KEY (CATEGORY_ID) REFERENCES SENSITIVITY_CATEGORIES(CATEGORY_ID)
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS IDX_SENSITIVE_PATTERNS_CATEGORY ON SENSITIVE_PATTERNS(CATEGORY_ID);
CREATE INDEX IF NOT EXISTS IDX_SENSITIVE_KEYWORDS_CATEGORY ON SENSITIVE_KEYWORDS(CATEGORY_ID);
CREATE INDEX IF NOT EXISTS IDX_SENSITIVE_BUNDLES_ACTIVE ON SENSITIVE_BUNDLES(IS_ACTIVE);
CREATE INDEX IF NOT EXISTS IDX_COMPLIANCE_MAPPING_CATEGORY ON COMPLIANCE_MAPPING(CATEGORY_ID);
WHEN NOT MATCHED THEN
    INSERT (PATTERN_ID, CATEGORY, PATTERN, SENSITIVITY_WEIGHT, IS_ACTIVE, 
            CREATED_BY, CREATED_AT, VERSION_NUMBER)
    VALUES (source.PATTERN_ID, source.CATEGORY, source.PATTERN, source.SENSITIVITY_WEIGHT, 
            source.IS_ACTIVE, source.CREATED_BY, source.CREATED_AT, source.VERSION_NUMBER);

-- Insert keywords
MERGE INTO SENSITIVE_KEYWORDS AS target
USING (
    SELECT 
        column1 AS KEYWORD_ID,
        column2 AS CATEGORY,
        column3 AS KEYWORD,
        column4 AS MATCH_TYPE_CODE,
        column5 AS SENSITIVITY_WEIGHT,
        column6 AS IS_ACTIVE,
        column7 AS CREATED_BY,
        column8 AS CREATED_AT,
        column9 AS VERSION_NUMBER
    FROM (VALUES
        -- AI/ML Keywords
        (UUID_STRING(), 'AI_MODEL', 'tensorflow', 'EXACT', 0.8, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AI_MODEL', 'pytorch', 'EXACT', 0.8, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AI_MODEL', 'llm', 'EXACT', 0.9, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- PII Keywords
        (UUID_STRING(), 'PII', 'ssn', 'EXACT', 10.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'social_security', 'EXACT', 10.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'passport', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'drivers_license', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'medical_record', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'address', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'phone', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'email', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'date_of_birth', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- FINANCIAL Keywords
        (UUID_STRING(), 'FINANCIAL', 'credit_card', 'EXACT', 10.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'FINANCIAL', 'account_number', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'FINANCIAL', 'routing_number', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'FINANCIAL', 'iban', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'FINANCIAL', 'swift_code', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'FINANCIAL', 'balance', 'EXACT', 7.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'FINANCIAL', 'transaction_amount', 'EXACT', 7.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- SOX Keywords
        (UUID_STRING(), 'SOX', 'general_ledger', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOX', 'journal_entry', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOX', 'financial_statement', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOX', 'audit_trail', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOX', 'internal_control', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOX', 'revenue_recognition', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOX', 'segregation_duties', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- SOC2 Keywords
        (UUID_STRING(), 'SOC2', 'encryption_key', 'EXACT', 10.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOC2', 'access_log', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOC2', 'authentication_token', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOC2', 'security_incident', 'EXACT', 8.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOC2', 'session_id', 'EXACT', 7.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOC2', 'firewall_rule', 'EXACT', 6.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'SOC2', 'data_retention', 'EXACT', 7.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- AUTH Keywords
        (UUID_STRING(), 'AUTH', 'password', 'EXACT', 10.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AUTH', 'secret_key', 'EXACT', 10.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AUTH', 'api_key', 'EXACT', 9.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AUTH', 'private_key', 'EXACT', 10.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- INTERNAL Keywords
        (UUID_STRING(), 'INTERNAL', 'invoice_date', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'due_date', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'created_date', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'updated_date', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'status', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'type', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'category', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'currency_code', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'INTERNAL', 'country_code', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1)
    ) AS source_data
) AS source
ON target.KEYWORD_ID = source.KEYWORD_ID
WHEN MATCHED THEN
    UPDATE SET
        target.CATEGORY = source.CATEGORY,
        target.KEYWORD = source.KEYWORD,
        target.MATCH_TYPE_CODE = source.MATCH_TYPE_CODE,
        target.SENSITIVITY_WEIGHT = source.SENSITIVITY_WEIGHT,
        target.IS_ACTIVE = source.IS_ACTIVE,
        target.UPDATED_BY = CURRENT_USER(),
        target.UPDATED_AT = CURRENT_TIMESTAMP(),
        target.VERSION_NUMBER = source.VERSION_NUMBER
WHEN NOT MATCHED THEN
    INSERT (KEYWORD_ID, CATEGORY, KEYWORD, MATCH_TYPE_CODE, SENSITIVITY_WEIGHT, 
            IS_ACTIVE, CREATED_BY, CREATED_AT, VERSION_NUMBER)
    VALUES (source.KEYWORD_ID, source.CATEGORY, source.KEYWORD, source.MATCH_TYPE_CODE, 
            source.SENSITIVITY_WEIGHT, source.IS_ACTIVE, source.CREATED_BY, 
            source.CREATED_AT, source.VERSION_NUMBER);

--- 4️⃣ Create and Configure Roles
BEGIN
    -- Create roles if they don't exist
    EXECUTE IMMEDIATE 'CREATE ROLE IF NOT EXISTS DATA_CLASSIFICATION_GOVERNANCE_READ';
    EXECUTE IMMEDIATE 'CREATE ROLE IF NOT EXISTS DATA_CLASSIFICATION_GOVERNANCE_WRITE';
    
    -- Grant database and schema usage
    EXECUTE IMMEDIATE 'GRANT USAGE ON DATABASE DATA_CLASSIFICATION_DB TO ROLE DATA_CLASSIFICATION_GOVERNANCE_READ';
    EXECUTE IMMEDIATE 'GRANT USAGE ON SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_CLASSIFICATION_GOVERNANCE_READ';
    
    -- Grant read permissions
    EXECUTE IMMEDIATE 'GRANT SELECT ON ALL TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_CLASSIFICATION_GOVERNANCE_READ';
    EXECUTE IMMEDIATE 'GRANT SELECT ON FUTURE TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_CLASSIFICATION_GOVERNANCE_READ';
    
    -- Grant write permissions
    EXECUTE IMMEDIATE 'GRANT USAGE ON DATABASE DATA_CLASSIFICATION_DB TO ROLE DATA_CLASSIFICATION_GOVERNANCE_WRITE';
    EXECUTE IMMEDIATE 'GRANT USAGE ON SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_CLASSIFICATION_GOVERNANCE_WRITE';
    EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_CLASSIFICATION_GOVERNANCE_WRITE';
    EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_CLASSIFICATION_GOVERNANCE_WRITE';
    
    -- Grant roles to appropriate users (update with your actual users)
    -- EXECUTE IMMEDIATE 'GRANT ROLE DATA_CLASSIFICATION_GOVERNANCE_READ TO USER your_readonly_user';
    -- EXECUTE IMMEDIATE 'GRANT ROLE DATA_CLASSIFICATION_GOVERNANCE_WRITE TO USER your_readwrite_user';
    
    RETURN 'Roles and permissions configured successfully';
EXCEPTION
    WHEN OTHER THEN
        RETURN 'Error configuring roles: ' || SQLERRM;
END;

-- Align existing tables to canonical schema expected by pipeline
ALTER TABLE IF EXISTS SENSITIVE_PATTERNS ADD COLUMN IF NOT EXISTS PATTERN_REGEX STRING;
ALTER TABLE IF EXISTS SENSITIVE_PATTERNS ADD COLUMN IF NOT EXISTS SENSITIVITY_TYPE STRING;
ALTER TABLE IF EXISTS SENSITIVE_PATTERNS ADD COLUMN IF NOT EXISTS EXAMPLE STRING;

ALTER TABLE IF EXISTS SENSITIVE_KEYWORDS ADD COLUMN IF NOT EXISTS KEYWORD STRING;
ALTER TABLE IF EXISTS SENSITIVE_KEYWORDS ADD COLUMN IF NOT EXISTS SCORE FLOAT;
ALTER TABLE IF EXISTS SENSITIVE_KEYWORDS ADD COLUMN IF NOT EXISTS SENSITIVITY_TYPE STRING;
ALTER TABLE IF EXISTS SENSITIVE_KEYWORDS ADD COLUMN IF NOT EXISTS SCOPE STRING;

ALTER TABLE IF EXISTS SENSITIVITY_CATEGORIES ADD COLUMN IF NOT EXISTS PARENT_CATEGORY STRING;
ALTER TABLE IF EXISTS SENSITIVITY_CATEGORIES ADD COLUMN IF NOT EXISTS DEFAULT_THRESHOLD FLOAT;

ALTER TABLE IF EXISTS SENSITIVITY_THRESHOLDS ADD COLUMN IF NOT EXISTS NAME STRING;
ALTER TABLE IF EXISTS SENSITIVITY_THRESHOLDS ADD COLUMN IF NOT EXISTS VALUE FLOAT;
ALTER TABLE IF EXISTS SENSITIVITY_THRESHOLDS ADD COLUMN IF NOT EXISTS APPLIES_TO STRING;

ALTER TABLE IF EXISTS SENSITIVITY_WEIGHTS ADD COLUMN IF NOT EXISTS SOURCE STRING;

ALTER TABLE IF EXISTS SENSITIVE_BUNDLES ADD COLUMN IF NOT EXISTS PATTERN_IDS_ARRAY ARRAY;
ALTER TABLE IF EXISTS SENSITIVE_BUNDLES ADD COLUMN IF NOT EXISTS KEYWORD_IDS_ARRAY ARRAY;

ALTER TABLE IF EXISTS COMPLIANCE_MAPPING ADD COLUMN IF NOT EXISTS SENSITIVITY_TYPE STRING;
ALTER TABLE IF EXISTS COMPLIANCE_MAPPING ADD COLUMN IF NOT EXISTS COMPLIANCE_FRAMEWORK STRING;
ALTER TABLE IF EXISTS COMPLIANCE_MAPPING ADD COLUMN IF NOT EXISTS REQUIRED_ACTIONS STRING;

ALTER TABLE IF EXISTS SENSITIVITY_MODEL_CONFIG ADD COLUMN IF NOT EXISTS MODEL_PROVIDER STRING;
ALTER TABLE IF EXISTS SENSITIVITY_MODEL_CONFIG ADD COLUMN IF NOT EXISTS PROMPT_TEMPLATE STRING;
ALTER TABLE IF EXISTS SENSITIVITY_MODEL_CONFIG ADD COLUMN IF NOT EXISTS TEMPERATURE FLOAT;
ALTER TABLE IF EXISTS SENSITIVITY_MODEL_CONFIG ADD COLUMN IF NOT EXISTS MAX_TOKENS NUMBER;
ALTER TABLE IF EXISTS SENSITIVITY_MODEL_CONFIG ADD COLUMN IF NOT EXISTS RESPONSE_SCHEMA VARIANT;

-- Control tables
CREATE TABLE IF NOT EXISTS DETECTION_ALLOWLIST (
  FQN STRING PRIMARY KEY,
  CREATED_AT TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP(),
  CREATED_BY STRING DEFAULT CURRENT_USER()
);

CREATE TABLE IF NOT EXISTS DETECTION_BLOCKLIST (
  FQN STRING PRIMARY KEY,
  CREATED_AT TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP(),
  CREATED_BY STRING DEFAULT CURRENT_USER()
);

CREATE TABLE IF NOT EXISTS FALSE_POSITIVE_EXCEPTIONS (
  FQN STRING PRIMARY KEY,
  EXPLANATION STRING,
  CREATED_AT TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP(),
  CREATED_BY STRING DEFAULT CURRENT_USER()
);

-- Canonical results
CREATE TABLE IF NOT EXISTS AI_ASSISTANT_SENSITIVE_ASSETS (
  RUN_ID STRING,
  DATABASE_NAME STRING,
  SCHEMA_NAME STRING,
  TABLE_NAME STRING,
  COLUMN_NAME STRING,
  DETECTED_CATEGORY STRING,
  DETECTED_TYPE STRING,
  COMBINED_CONFIDENCE FLOAT,
  METHODS_USED ARRAY,
  COMPLIANCE_TAGS ARRAY,
  SAMPLE_METADATA VARIANT,
  DETECTION_REASON STRING,
  LAST_SCAN_TS TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP(),
  PRIMARY KEY (DATABASE_NAME, SCHEMA_NAME, TABLE_NAME, COLUMN_NAME)
);

CREATE TABLE IF NOT EXISTS AI_ASSISTANT_SENSITIVE_ASSETS_HISTORY LIKE AI_ASSISTANT_SENSITIVE_ASSETS;

-- Canonical views
CREATE OR REPLACE VIEW VW_SENSITIVE_PATTERNS_CANONICAL AS
SELECT 
  PATTERN_ID,
  COALESCE(PATTERN_REGEX, PATTERN_STRING) AS PATTERN_REGEX,
  PATTERN_NAME,
  COALESCE(SENSITIVITY_TYPE, CATEGORY_ID) AS SENSITIVITY_TYPE,
  EXAMPLE,
  SENSITIVITY_WEIGHT,
  IS_ACTIVE,
  CREATED_AT,
  UPDATED_AT
FROM SENSITIVE_PATTERNS;

CREATE OR REPLACE VIEW VW_SENSITIVE_KEYWORDS_CANONICAL AS
SELECT 
  KEYWORD_ID,
  COALESCE(KEYWORD, KEYWORD_STRING) AS KEYWORD,
  COALESCE(SCORE, SENSITIVITY_WEIGHT) AS SCORE,
  COALESCE(SENSITIVITY_TYPE, CATEGORY_ID) AS SENSITIVITY_TYPE,
  COALESCE(SCOPE, 'column_name') AS SCOPE,
  IS_ACTIVE,
  CREATED_AT,
  UPDATED_AT
FROM SENSITIVE_KEYWORDS;

CREATE OR REPLACE VIEW VW_SENSITIVITY_THRESHOLDS_CANONICAL AS
SELECT 
  THRESHOLD_ID,
  COALESCE(NAME, THRESHOLD_NAME) AS NAME,
  COALESCE(VALUE, CONFIDENCE_LEVEL) AS VALUE,
  COALESCE(APPLIES_TO, SENSITIVITY_LEVEL) AS APPLIES_TO,
  DESCRIPTION,
  IS_ACTIVE
FROM SENSITIVITY_THRESHOLDS;

CREATE OR REPLACE VIEW VW_SENSITIVITY_WEIGHTS_CANONICAL AS
SELECT 
  WEIGHT_ID,
  COALESCE(SOURCE, SENSITIVITY_TYPE) AS SOURCE,
  WEIGHT,
  DESCRIPTION,
  IS_ACTIVE
FROM SENSITIVITY_WEIGHTS;

CREATE OR REPLACE VIEW VW_SENSITIVITY_MODEL_CONFIG_CANONICAL AS
SELECT 
  MODEL_ID,
  COALESCE(MODEL_PROVIDER, 'OpenAI') AS MODEL_PROVIDER,
  MODEL_NAME,
  MODEL_VERSION,
  MODEL_TYPE,
  COALESCE(PROMPT_TEMPLATE, TRY_TO_VARCHAR(CONFIGURATION)) AS PROMPT_TEMPLATE,
  COALESCE(TEMPERATURE, 0.0) AS TEMPERATURE,
  COALESCE(MAX_TOKENS, 800) AS MAX_TOKENS,
  RESPONSE_SCHEMA,
  IS_ACTIVE
FROM SENSITIVITY_MODEL_CONFIG;
