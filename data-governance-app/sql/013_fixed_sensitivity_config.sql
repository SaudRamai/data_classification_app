-- =====================================================
-- ✅ Dynamic Sensitivity Configuration Seed Script (Fixed)
-- Clean, Executable Version
-- =====================================================

-- 1️⃣ Create Database and Schemas
CREATE DATABASE IF NOT EXISTS DATA_CLASSIFICATION_DB;
USE DATABASE DATA_CLASSIFICATION_DB;

-- Create Governance Schema
CREATE SCHEMA IF NOT EXISTS DATA_CLASSIFICATION_GOVERNANCE;
USE SCHEMA DATA_CLASSIFICATION_GOVERNANCE;

-- Create Scan Catalog Schema
CREATE SCHEMA IF NOT EXISTS SCAN_CATALOG;

-- Create TABLE_SAMPLES in SCAN_CATALOG
CREATE TABLE IF NOT EXISTS SCAN_CATALOG.TABLE_SAMPLES (
    TABLE_CATALOG STRING,
    TABLE_SCHEMA STRING, 
    TABLE_NAME STRING,
    SAMPLE_DATA VARIANT,
    SAMPLE_SIZE NUMBER,
    SAMPLE_METHOD STRING,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- 2️⃣ Core Sensitivity Tables
CREATE OR REPLACE TABLE SENSITIVE_PATTERNS (
    PATTERN_ID STRING PRIMARY KEY,
    CATEGORY STRING NOT NULL,
    PATTERN STRING NOT NULL,
    SENSITIVITY_WEIGHT FLOAT DEFAULT 0.5,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY STRING,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_BY STRING,
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1
);

-- AI/ML specific tables
CREATE OR REPLACE TABLE AI_DETECTION_PATTERNS (
    PATTERN_ID STRING PRIMARY KEY,
    CATEGORY STRING NOT NULL,
    PATTERN STRING NOT NULL,
    DESCRIPTION STRING,
    CONFIDENCE_LEVEL FLOAT DEFAULT 0.8,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY STRING,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_BY STRING,
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1
);

CREATE OR REPLACE TABLE SENSITIVE_KEYWORDS (
    KEYWORD_ID STRING PRIMARY KEY,
    CATEGORY STRING NOT NULL,
    KEYWORD STRING NOT NULL,
    MATCH_TYPE_CODE STRING DEFAULT 'FUZZY',
    SENSITIVITY_WEIGHT FLOAT DEFAULT 0.5,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY STRING,
    CREATED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_BY STRING,
    UPDATED_AT TIMESTAMP_NTZ,
    VERSION_NUMBER INTEGER DEFAULT 1,
    METADATA VARIANT
);

-- 3️⃣ Insert Seed Data
-- Insert patterns
MERGE INTO SENSITIVE_PATTERNS AS target
USING (
    SELECT 
        column1 AS PATTERN_ID,
        column2 AS CATEGORY,
        column3 AS PATTERN,
        column4 AS SENSITIVITY_WEIGHT,
        column5 AS IS_ACTIVE,
        column6 AS CREATED_BY,
        column7 AS CREATED_AT,
        column8 AS VERSION_NUMBER
    FROM (VALUES
        -- AI/ML Patterns
        (UUID_STRING(), 'AI_MODEL', '\\b(?:tensorflow|pytorch|scikit-learn)\\b', 0.9, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AI_MODEL', '\\b(?:bert|gpt|transformer|llm)\\b', 0.85, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- PII Patterns
        (UUID_STRING(), 'PII', '\\b\\d{3}-\\d{2}-\\d{4}\\b', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', '\\b[A-Z]\\d[A-Z] \\d[A-Z]\\d\\b', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- Financial Patterns
        (UUID_STRING(), 'FINANCIAL', '\\b\\d{4}[- ]?\\d{4}[- ]?\\d{4}[- ]?\\d{4}\\b', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'FINANCIAL', '\\b\\d{3}-?\\d{2}-?\\d{4}\\b', 0.9, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1)
    ) AS source_data
) AS source
ON target.PATTERN_ID = source.PATTERN_ID
WHEN MATCHED THEN
    UPDATE SET
        target.CATEGORY = source.CATEGORY,
        target.PATTERN = source.PATTERN,
        target.SENSITIVITY_WEIGHT = source.SENSITIVITY_WEIGHT,
        target.IS_ACTIVE = source.IS_ACTIVE,
        target.UPDATED_BY = CURRENT_USER(),
        target.UPDATED_AT = CURRENT_TIMESTAMP(),
        target.VERSION_NUMBER = source.VERSION_NUMBER
WHEN NOT MATCHED THEN
    INSERT (PATTERN_ID, CATEGORY, PATTERN, SENSITIVITY_WEIGHT, IS_ACTIVE, 
            CREATED_BY, CREATED_AT, VERSION_NUMBER)
    VALUES (source.PATTERN_ID, source.CATEGORY, source.PATTERN, source.SENSITIVITY_WEIGHT, 
            source.IS_ACTIVE, source.CREATED_BY, source.CREATED_AT, source.VERSION_NUMBER);

-- Insert keywords
MERGE INTO SENSITIVE_KEYWORDS AS target
USING (
    SELECT 
        column1 AS KEYWORD_ID,
        column2 AS CATEGORY,
        column3 AS KEYWORD,
        column4 AS MATCH_TYPE_CODE,
        column5 AS SENSITIVITY_WEIGHT,
        column6 AS IS_ACTIVE,
        column7 AS CREATED_BY,
        column8 AS CREATED_AT,
        column9 AS VERSION_NUMBER
    FROM (VALUES
        -- AI/ML Keywords
        (UUID_STRING(), 'AI_MODEL', 'tensorflow', 'EXACT', 0.8, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AI_MODEL', 'pytorch', 'EXACT', 0.8, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'AI_MODEL', 'llm', 'EXACT', 0.9, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        
        -- PII Keywords
        (UUID_STRING(), 'PII', 'ssn', 'EXACT', 1.0, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1),
        (UUID_STRING(), 'PII', 'social security', 'FUZZY', 0.9, TRUE, CURRENT_USER(), CURRENT_TIMESTAMP(), 1)
    ) AS source_data
) AS source
ON target.KEYWORD_ID = source.KEYWORD_ID
WHEN MATCHED THEN
    UPDATE SET
        target.CATEGORY = source.CATEGORY,
        target.KEYWORD = source.KEYWORD,
        target.MATCH_TYPE_CODE = source.MATCH_TYPE_CODE,
        target.SENSITIVITY_WEIGHT = source.SENSITIVITY_WEIGHT,
        target.IS_ACTIVE = source.IS_ACTIVE,
        target.UPDATED_BY = CURRENT_USER(),
        target.UPDATED_AT = CURRENT_TIMESTAMP(),
        target.VERSION_NUMBER = source.VERSION_NUMBER
WHEN NOT MATCHED THEN
    INSERT (KEYWORD_ID, CATEGORY, KEYWORD, MATCH_TYPE_CODE, SENSITIVITY_WEIGHT, 
            IS_ACTIVE, CREATED_BY, CREATED_AT, VERSION_NUMBER)
    VALUES (source.KEYWORD_ID, source.CATEGORY, source.KEYWORD, source.MATCH_TYPE_CODE, 
            source.SENSITIVITY_WEIGHT, source.IS_ACTIVE, source.CREATED_BY, 
            source.CREATED_AT, source.VERSION_NUMBER);

-- 4️⃣ Create and Configure Roles
BEGIN
    -- Create roles if they don't exist
    EXECUTE IMMEDIATE 'CREATE ROLE IF NOT EXISTS DATA_GOVERNANCE_READ';
    EXECUTE IMMEDIATE 'CREATE ROLE IF NOT EXISTS DATA_GOVERNANCE_WRITE';
    
    -- Grant database and schema usage
    EXECUTE IMMEDIATE 'GRANT USAGE ON DATABASE DATA_CLASSIFICATION_DB TO ROLE DATA_GOVERNANCE_READ';
    EXECUTE IMMEDIATE 'GRANT USAGE ON SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_GOVERNANCE_READ';
    
    -- Grant read permissions
    EXECUTE IMMEDIATE 'GRANT SELECT ON ALL TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_GOVERNANCE_READ';
    EXECUTE IMMEDIATE 'GRANT SELECT ON FUTURE TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_GOVERNANCE_READ';
    
    -- Grant write permissions
    EXECUTE IMMEDIATE 'GRANT USAGE ON DATABASE DATA_CLASSIFICATION_DB TO ROLE DATA_GOVERNANCE_WRITE';
    EXECUTE IMMEDIATE 'GRANT USAGE ON SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_GOVERNANCE_WRITE';
    EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_GOVERNANCE_WRITE';
    EXECUTE IMMEDIATE 'GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA DATA_CLASSIFICATION_DB.DATA_CLASSIFICATION_GOVERNANCE TO ROLE DATA_GOVERNANCE_WRITE';
    
    -- Grant roles to appropriate users (update with your actual users)
    -- EXECUTE IMMEDIATE 'GRANT ROLE DATA_GOVERNANCE_READ TO USER your_readonly_user';
    -- EXECUTE IMMEDIATE 'GRANT ROLE DATA_GOVERNANCE_WRITE TO USER your_readwrite_user';
    
    RETURN 'Roles and permissions configured successfully';
EXCEPTION
    WHEN OTHER THEN
        RETURN 'Error configuring roles: ' || SQLERRM;
END;
