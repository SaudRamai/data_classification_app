-- =============================================
-- DATA CLASSIFICATION GOVERNANCE - INIT SCRIPT
-- Creates schema/tables if not exist and idempotently seeds sample rows
-- Customize the database by setting the variable below, then run the script.
-- =============================================

-- Change this if you want a different DB
SET DB_NAME = 'DATA_CLASSIFICATION_DB';

USE DATABASE IDENTIFIER($DB_NAME);
CREATE SCHEMA IF NOT EXISTS DATA_CLASSIFICATION_GOVERNANCE;
USE SCHEMA DATA_CLASSIFICATION_GOVERNANCE;

-- =============================================
-- 1) TABLES (CREATE IF NOT EXISTS)
-- =============================================
CREATE TABLE IF NOT EXISTS ASSETS (
    ASSET_ID VARCHAR(50) PRIMARY KEY,
    ASSET_NAME VARCHAR(255) NOT NULL,
    DATABASE_NAME VARCHAR(100) NOT NULL,
    SCHEMA_NAME VARCHAR(100) NOT NULL,
    TABLE_NAME VARCHAR(100) NOT NULL,
    TABLE_TYPE VARCHAR(50),
    CLASSIFICATION_TAG VARCHAR(20),
    CONFIDENTIALITY_LEVEL INT,
    INTEGRITY_LEVEL INT,
    AVAILABILITY_LEVEL INT,
    BUSINESS_UNIT VARCHAR(100),
    DATA_OWNER VARCHAR(150),
    DATA_STEWARD VARCHAR(150),
    CREATED_DATE DATE,
    LAST_MODIFIED_DATE TIMESTAMP_NTZ,
    LAST_CLASSIFIED_DATE DATE,
    LAST_REVIEW_DATE DATE,
    NEXT_REVIEW_DATE DATE,
    PII_DETECTED BOOLEAN,
    FINANCIAL_DATA_DETECTED BOOLEAN,
    IP_DATA_DETECTED BOOLEAN,
    REGULATORY_FLAGS INT,
    USAGE_FREQUENCY VARCHAR(20),
    ROW_COUNT NUMBER(38,0),
    SIZE_GB NUMBER(10,2),
    DATA_QUALITY_SCORE NUMBER(3,0),
    RISK_SCORE NUMBER(3,0),
    TAGS VARIANT,
    DESCRIPTION VARCHAR(1000),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE IF NOT EXISTS COMPLIANCE_MAPPING (
    MAPPING_ID VARCHAR(50) PRIMARY KEY,
    ASSET_ID VARCHAR(50) REFERENCES ASSETS(ASSET_ID),
    FRAMEWORK_NAME VARCHAR(50),
    REQUIREMENT_ID VARCHAR(100),
    REQUIREMENT_DESCRIPTION VARCHAR(500),
    COMPLIANCE_STATUS VARCHAR(20),
    EVIDENCE_LOCATION VARCHAR(500),
    LAST_AUDIT_DATE DATE,
    NEXT_AUDIT_DATE DATE,
    AUDIT_FINDINGS VARCHAR(1000),
    CONTROLS_APPLIED VARCHAR(1000),
    GAP_ANALYSIS VARCHAR(1000),
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE IF NOT EXISTS CLASSIFICATION_HISTORY (
    HISTORY_ID VARCHAR(50) PRIMARY KEY,
    ASSET_ID VARCHAR(50) REFERENCES ASSETS(ASSET_ID),
    PREVIOUS_CLASSIFICATION VARCHAR(20),
    NEW_CLASSIFICATION VARCHAR(20),
    PREVIOUS_CONFIDENTIALITY INT,
    NEW_CONFIDENTIALITY INT,
    PREVIOUS_INTEGRITY INT,
    NEW_INTEGRITY INT,
    PREVIOUS_AVAILABILITY INT,
    NEW_AVAILABILITY INT,
    CHANGED_BY VARCHAR(150),
    CHANGE_REASON VARCHAR(1000),
    CHANGE_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    APPROVAL_REQUIRED BOOLEAN,
    APPROVED_BY VARCHAR(150),
    APPROVAL_TIMESTAMP TIMESTAMP_NTZ,
    BUSINESS_JUSTIFICATION VARCHAR(1000)
);

CREATE TABLE IF NOT EXISTS ALERT_LOGS (
    ALERT_ID VARCHAR(50) PRIMARY KEY,
    ALERT_TYPE VARCHAR(50),
    ALERT_PRIORITY VARCHAR(20),
    ALERT_STATUS VARCHAR(20),
    ASSET_ID VARCHAR(50) REFERENCES ASSETS(ASSET_ID),
    ALERT_TITLE VARCHAR(255),
    ALERT_MESSAGE VARCHAR(1000),
    ALERT_DETAILS VARIANT,
    ASSIGNED_TO VARCHAR(150),
    DUE_DATE DATE,
    CREATED_BY VARCHAR(150),
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    ACKNOWLEDGED_TIMESTAMP TIMESTAMP_NTZ,
    RESOLVED_TIMESTAMP TIMESTAMP_NTZ,
    RESOLUTION_NOTES VARCHAR(1000)
);

CREATE TABLE IF NOT EXISTS RISK_ASSESSMENTS (
    ASSESSMENT_ID VARCHAR(50) PRIMARY KEY,
    ASSET_ID VARCHAR(50) REFERENCES ASSETS(ASSET_ID),
    ASSESSMENT_DATE DATE,
    RISK_CATEGORY VARCHAR(50),
    RISK_LEVEL VARCHAR(20),
    RISK_SCORE NUMBER(3,0),
    RISK_DESCRIPTION VARCHAR(1000),
    IMPACT_DESCRIPTION VARCHAR(1000),
    LIKELIHOOD VARCHAR(20),
    IMPACT VARCHAR(20),
    MITIGATION_CONTROLS VARCHAR(1000),
    RESIDUAL_RISK VARCHAR(20),
    ASSESSED_BY VARCHAR(150),
    NEXT_ASSESSMENT_DATE DATE,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE TABLE IF NOT EXISTS DATA_QUALITY_METRICS (
    METRIC_ID VARCHAR(50) PRIMARY KEY,
    ASSET_ID VARCHAR(50) REFERENCES ASSETS(ASSET_ID),
    METRIC_DATE DATE,
    COMPLETENESS_SCORE NUMBER(3,0),
    ACCURACY_SCORE NUMBER(3,0),
    CONSISTENCY_SCORE NUMBER(3,0),
    TIMELINESS_SCORE NUMBER(3,0),
    UNIQUENESS_SCORE NUMBER(3,0),
    VALIDITY_SCORE NUMBER(3,0),
    OVERALL_QUALITY_SCORE NUMBER(3,0),
    TOTAL_RECORDS NUMBER(38,0),
    NULL_COUNT NUMBER(38,0),
    DUPLICATE_COUNT NUMBER(38,0),
    FAILED_CHECKS NUMBER(38,0),
    QUALITY_ISSUES VARCHAR(1000),
    LAST_QUALITY_CHECK TIMESTAMP_NTZ,
    CREATED_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

-- =============================================
-- 2) SEED SAMPLE DATA (IDEMPOTENT MERGE)
-- =============================================
-- Assets
WITH src AS (
  SELECT * FROM VALUES
    ('AST-001','Customers','DATA_CLASSIFICATION_DB','PUBLIC','CUSTOMERS','TABLE','C2',2,2,2,'Sales','alice','bob',CURRENT_DATE-120,CURRENT_TIMESTAMP-50, CURRENT_DATE-30, CURRENT_DATE-15, CURRENT_DATE+15, TRUE, FALSE, FALSE, 1,'HIGH',100000, 12.5, 85, 6, PARSE_JSON('{"domain":"PII"}'), 'Customer master table', TRUE),
    ('AST-002','Orders','DATA_CLASSIFICATION_DB','PUBLIC','ORDERS','TABLE','C2',2,2,2,'Sales','carol','dave',CURRENT_DATE-200,CURRENT_TIMESTAMP-20, CURRENT_DATE-45, CURRENT_DATE-20, CURRENT_DATE+40, FALSE, TRUE, FALSE, 0,'MEDIUM',500000, 28.2, 80, 7, PARSE_JSON('{"domain":"Financial"}'), 'Orders fact table', TRUE),
    ('AST-003','Payments','DATA_CLASSIFICATION_DB','FINANCE','PAYMENTS','TABLE',NULL,3,2,2,'Finance','erin','frank',CURRENT_DATE-300,CURRENT_TIMESTAMP-10, NULL, NULL, CURRENT_DATE+25, FALSE, TRUE, TRUE, 1,'LOW',250000, 18.7, 70, 8, PARSE_JSON('{"domain":"Financial"}'), 'Payments sensitive table', TRUE),
    ('AST-004','Products','DATA_CLASSIFICATION_DB','PUBLIC','PRODUCTS','TABLE','C1',1,1,2,'Product','grace','henry',CURRENT_DATE-400,CURRENT_TIMESTAMP-5, CURRENT_DATE-90, CURRENT_DATE-60, CURRENT_DATE+60, FALSE, FALSE, FALSE, 0,'MEDIUM',75000, 4.5, 90, 3, PARSE_JSON('{"domain":"Catalog"}'), 'Products dimension', TRUE),
    ('AST-005','Logs','DATA_CLASSIFICATION_DB','PLATFORM','APP_LOGS','EXTERNAL','',1,1,1,'Platform','ian','jane',CURRENT_DATE-60,CURRENT_TIMESTAMP-1, NULL, NULL, NULL, FALSE, FALSE, FALSE, 0,'HIGH',NULL, NULL, 65, 4, PARSE_JSON('{"domain":"Telemetry"}'), 'Application logs', TRUE)
  AS t(ASSET_ID,ASSET_NAME,DATABASE_NAME,SCHEMA_NAME,TABLE_NAME,TABLE_TYPE,CLASSIFICATION_TAG,CONFIDENTIALITY_LEVEL,INTEGRITY_LEVEL,AVAILABILITY_LEVEL,BUSINESS_UNIT,DATA_OWNER,DATA_STEWARD,CREATED_DATE,LAST_MODIFIED_DATE,LAST_CLASSIFIED_DATE,LAST_REVIEW_DATE,NEXT_REVIEW_DATE,PII_DETECTED,FINANCIAL_DATA_DETECTED,IP_DATA_DETECTED,REGULATORY_FLAGS,USAGE_FREQUENCY,ROW_COUNT,SIZE_GB,DATA_QUALITY_SCORE,RISK_SCORE,TAGS,DESCRIPTION,IS_ACTIVE)
)
MERGE INTO ASSETS tgt
USING src s
ON tgt.ASSET_ID = s.ASSET_ID
WHEN NOT MATCHED THEN INSERT (
  ASSET_ID,ASSET_NAME,DATABASE_NAME,SCHEMA_NAME,TABLE_NAME,TABLE_TYPE,CLASSIFICATION_TAG,
  CONFIDENTIALITY_LEVEL,INTEGRITY_LEVEL,AVAILABILITY_LEVEL,BUSINESS_UNIT,DATA_OWNER,DATA_STEWARD,
  CREATED_DATE,LAST_MODIFIED_DATE,LAST_CLASSIFIED_DATE,LAST_REVIEW_DATE,NEXT_REVIEW_DATE,
  PII_DETECTED,FINANCIAL_DATA_DETECTED,IP_DATA_DETECTED,REGULATORY_FLAGS,USAGE_FREQUENCY,
  ROW_COUNT,SIZE_GB,DATA_QUALITY_SCORE,RISK_SCORE,TAGS,DESCRIPTION,IS_ACTIVE
) VALUES (
  s.ASSET_ID,s.ASSET_NAME,s.DATABASE_NAME,s.SCHEMA_NAME,s.TABLE_NAME,s.TABLE_TYPE,s.CLASSIFICATION_TAG,
  s.CONFIDENTIALITY_LEVEL,s.INTEGRITY_LEVEL,s.AVAILABILITY_LEVEL,s.BUSINESS_UNIT,s.DATA_OWNER,s.DATA_STEWARD,
  s.CREATED_DATE,s.LAST_MODIFIED_DATE,s.LAST_CLASSIFIED_DATE,s.LAST_REVIEW_DATE,s.NEXT_REVIEW_DATE,
  s.PII_DETECTED,s.FINANCIAL_DATA_DETECTED,s.IP_DATA_DETECTED,s.REGULATORY_FLAGS,s.USAGE_FREQUENCY,
  s.ROW_COUNT,s.SIZE_GB,s.DATA_QUALITY_SCORE,s.RISK_SCORE,s.TAGS,s.DESCRIPTION,s.IS_ACTIVE
);

-- Compliance mapping
WITH src AS (
  SELECT * FROM VALUES
    ('MAP-001','AST-001','GDPR','ART-6','Lawful basis for processing','COMPLIANT','/evidence/gdpr/art6',CURRENT_DATE-365,CURRENT_DATE+365,NULL,'RBAC, Encryption','',CURRENT_TIMESTAMP),
    ('MAP-002','AST-002','PCI DSS','REQ-3','Protect stored cardholder data','PARTIAL','/evidence/pci/req3',CURRENT_DATE-200,CURRENT_DATE+170,'Key rotation overdue','Tokenization','Gap: rotate keys',CURRENT_TIMESTAMP)
  AS t(MAPPING_ID,ASSET_ID,FRAMEWORK_NAME,REQUIREMENT_ID,REQUIREMENT_DESCRIPTION,COMPLIANCE_STATUS,EVIDENCE_LOCATION,LAST_AUDIT_DATE,NEXT_AUDIT_DATE,AUDIT_FINDINGS,CONTROLS_APPLIED,GAP_ANALYSIS,UPDATED_TIMESTAMP)
)
MERGE INTO COMPLIANCE_MAPPING tgt
USING src s
ON tgt.MAPPING_ID = s.MAPPING_ID
WHEN NOT MATCHED THEN INSERT (
  MAPPING_ID,ASSET_ID,FRAMEWORK_NAME,REQUIREMENT_ID,REQUIREMENT_DESCRIPTION,COMPLIANCE_STATUS,
  EVIDENCE_LOCATION,LAST_AUDIT_DATE,NEXT_AUDIT_DATE,AUDIT_FINDINGS,CONTROLS_APPLIED,GAP_ANALYSIS,UPDATED_TIMESTAMP
) VALUES (
  s.MAPPING_ID,s.ASSET_ID,s.FRAMEWORK_NAME,s.REQUIREMENT_ID,s.REQUIREMENT_DESCRIPTION,s.COMPLIANCE_STATUS,
  s.EVIDENCE_LOCATION,s.LAST_AUDIT_DATE,s.NEXT_AUDIT_DATE,s.AUDIT_FINDINGS,s.CONTROLS_APPLIED,s.GAP_ANALYSIS,s.UPDATED_TIMESTAMP
);

-- Classification history
WITH src AS (
  SELECT * FROM VALUES
    ('HIS-001','AST-001','', 'C2', 0,2, 0,2, 0,2, 'alice','initial classification', CURRENT_TIMESTAMP-40, TRUE, NULL, NULL, 'required by policy'),
    ('HIS-002','AST-003','', 'C3', 0,3, 0,2, 0,2, 'erin', 'first tag', CURRENT_TIMESTAMP-5, TRUE, NULL, NULL, 'sensitive data found')
  AS t(HISTORY_ID,ASSET_ID,PREVIOUS_CLASSIFICATION,NEW_CLASSIFICATION,PREVIOUS_CONFIDENTIALITY,NEW_CONFIDENTIALITY,PREVIOUS_INTEGRITY,NEW_INTEGRITY,PREVIOUS_AVAILABILITY,NEW_AVAILABILITY,CHANGED_BY,CHANGE_REASON,CHANGE_TIMESTAMP,APPROVAL_REQUIRED,APPROVED_BY,APPROVAL_TIMESTAMP,BUSINESS_JUSTIFICATION)
)
MERGE INTO CLASSIFICATION_HISTORY tgt
USING src s
ON tgt.HISTORY_ID = s.HISTORY_ID
WHEN NOT MATCHED THEN INSERT (
  HISTORY_ID,ASSET_ID,PREVIOUS_CLASSIFICATION,NEW_CLASSIFICATION,
  PREVIOUS_CONFIDENTIALITY,NEW_CONFIDENTIALITY,PREVIOUS_INTEGRITY,NEW_INTEGRITY,PREVIOUS_AVAILABILITY,NEW_AVAILABILITY,
  CHANGED_BY,CHANGE_REASON,CHANGE_TIMESTAMP,APPROVAL_REQUIRED,APPROVED_BY,APPROVAL_TIMESTAMP,BUSINESS_JUSTIFICATION
) VALUES (
  s.HISTORY_ID,s.ASSET_ID,s.PREVIOUS_CLASSIFICATION,s.NEW_CLASSIFICATION,
  s.PREVIOUS_CONFIDENTIALITY,s.NEW_CONFIDENTIALITY,s.PREVIOUS_INTEGRITY,s.NEW_INTEGRITY,s.PREVIOUS_AVAILABILITY,s.NEW_AVAILABILITY,
  s.CHANGED_BY,s.CHANGE_REASON,s.CHANGE_TIMESTAMP,s.APPROVAL_REQUIRED,s.APPROVED_BY,s.APPROVAL_TIMESTAMP,s.BUSINESS_JUSTIFICATION
);

-- Alert logs
WITH src AS (
  SELECT * FROM VALUES
    ('ALR-001','POLICY','HIGH','OPEN','AST-002','Policy Violation','Unauthorized access detected',PARSE_JSON('{"ip":"10.0.0.1"}'),'secops',CURRENT_DATE+7,'system',CURRENT_TIMESTAMP,NULL,NULL,NULL),
    ('ALR-002','QUALITY','MEDIUM','ACTIVE','AST-001','Data Quality Drop','DQ score decreased',PARSE_JSON('{"dq":72}'),'steward',CURRENT_DATE+14,'dq-bot',CURRENT_TIMESTAMP,NULL,NULL,NULL)
  AS t(ALERT_ID,ALERT_TYPE,ALERT_PRIORITY,ALERT_STATUS,ASSET_ID,ALERT_TITLE,ALERT_MESSAGE,ALERT_DETAILS,ASSIGNED_TO,DUE_DATE,CREATED_BY,CREATED_TIMESTAMP,ACKNOWLEDGED_TIMESTAMP,RESOLVED_TIMESTAMP,RESOLUTION_NOTES)
)
MERGE INTO ALERT_LOGS tgt
USING src s
ON tgt.ALERT_ID = s.ALERT_ID
WHEN NOT MATCHED THEN INSERT (
  ALERT_ID,ALERT_TYPE,ALERT_PRIORITY,ALERT_STATUS,ASSET_ID,ALERT_TITLE,ALERT_MESSAGE,ALERT_DETAILS,ASSIGNED_TO,DUE_DATE,CREATED_BY,CREATED_TIMESTAMP,ACKNOWLEDGED_TIMESTAMP,RESOLVED_TIMESTAMP,RESOLUTION_NOTES
) VALUES (
  s.ALERT_ID,s.ALERT_TYPE,s.ALERT_PRIORITY,s.ALERT_STATUS,s.ASSET_ID,s.ALERT_TITLE,s.ALERT_MESSAGE,s.ALERT_DETAILS,s.ASSIGNED_TO,s.DUE_DATE,s.CREATED_BY,s.CREATED_TIMESTAMP,s.ACKNOWLEDGED_TIMESTAMP,s.RESOLVED_TIMESTAMP,s.RESOLUTION_NOTES
);

-- Risk assessments
WITH src AS (
  SELECT * FROM VALUES
    ('RAS-001','AST-003',CURRENT_DATE-3,'Financial','High',8,'Sensitive finance table','High customer impact','LIKELY','HIGH','Encryption, Tokenization','MEDIUM','g.risk',CURRENT_DATE+180,CURRENT_TIMESTAMP),
    ('RAS-002','AST-002',CURRENT_DATE-15,'Operational','Medium',5,'Order system risk','Moderate impact','POSSIBLE','MEDIUM','Monitoring','MEDIUM','ops.risk',CURRENT_DATE+120,CURRENT_TIMESTAMP)
  AS t(ASSESSMENT_ID,ASSET_ID,ASSESSMENT_DATE,RISK_CATEGORY,RISK_LEVEL,RISK_SCORE,RISK_DESCRIPTION,IMPACT_DESCRIPTION,LIKELIHOOD,IMPACT,MITIGATION_CONTROLS,RESIDUAL_RISK,ASSESSED_BY,NEXT_ASSESSMENT_DATE,CREATED_TIMESTAMP)
)
MERGE INTO RISK_ASSESSMENTS tgt
USING src s
ON tgt.ASSESSMENT_ID = s.ASSESSMENT_ID
WHEN NOT MATCHED THEN INSERT (
  ASSESSMENT_ID,ASSET_ID,ASSESSMENT_DATE,RISK_CATEGORY,RISK_LEVEL,RISK_SCORE,RISK_DESCRIPTION,IMPACT_DESCRIPTION,LIKELIHOOD,IMPACT,MITIGATION_CONTROLS,RESIDUAL_RISK,ASSESSED_BY,NEXT_ASSESSMENT_DATE,CREATED_TIMESTAMP
) VALUES (
  s.ASSESSMENT_ID,s.ASSET_ID,s.ASSESSMENT_DATE,s.RISK_CATEGORY,s.RISK_LEVEL,s.RISK_SCORE,s.RISK_DESCRIPTION,s.IMPACT_DESCRIPTION,s.LIKELIHOOD,s.IMPACT,s.MITIGATION_CONTROLS,s.RESIDUAL_RISK,s.ASSESSED_BY,s.NEXT_ASSESSMENT_DATE,s.CREATED_TIMESTAMP
);

-- Data quality metrics
WITH src AS (
  SELECT * FROM VALUES
    ('DQM-001','AST-001',CURRENT_DATE-1,90,92,88,85,97,95,91,100000,1000,10,2,'minor null spikes',CURRENT_TIMESTAMP-1,CURRENT_TIMESTAMP),
    ('DQM-002','AST-002',CURRENT_DATE-1,80,84,79,75,90,88,83,500000,3000,115,7,'schema drift detected',CURRENT_TIMESTAMP-2,CURRENT_TIMESTAMP)
  AS t(METRIC_ID,ASSET_ID,METRIC_DATE,COMPLETENESS_SCORE,ACCURACY_SCORE,CONSISTENCY_SCORE,TIMELINESS_SCORE,UNIQUENESS_SCORE,VALIDITY_SCORE,OVERALL_QUALITY_SCORE,TOTAL_RECORDS,NULL_COUNT,DUPLICATE_COUNT,FAILED_CHECKS,QUALITY_ISSUES,LAST_QUALITY_CHECK,CREATED_TIMESTAMP)
)
MERGE INTO DATA_QUALITY_METRICS tgt
USING src s
ON tgt.METRIC_ID = s.METRIC_ID
WHEN NOT MATCHED THEN INSERT (
  METRIC_ID,ASSET_ID,METRIC_DATE,COMPLETENESS_SCORE,ACCURACY_SCORE,CONSISTENCY_SCORE,TIMELINESS_SCORE,UNIQUENESS_SCORE,VALIDITY_SCORE,OVERALL_QUALITY_SCORE,TOTAL_RECORDS,NULL_COUNT,DUPLICATE_COUNT,FAILED_CHECKS,QUALITY_ISSUES,LAST_QUALITY_CHECK,CREATED_TIMESTAMP
) VALUES (
  s.METRIC_ID,s.ASSET_ID,s.METRIC_DATE,s.COMPLETENESS_SCORE,s.ACCURACY_SCORE,s.CONSISTENCY_SCORE,s.TIMELINESS_SCORE,s.UNIQUENESS_SCORE,s.VALIDITY_SCORE,s.OVERALL_QUALITY_SCORE,s.TOTAL_RECORDS,s.NULL_COUNT,s.DUPLICATE_COUNT,s.FAILED_CHECKS,s.QUALITY_ISSUES,s.LAST_QUALITY_CHECK,s.CREATED_TIMESTAMP
);

-- Done
SELECT 'Initialization complete' AS STATUS, CURRENT_TIMESTAMP AS TS;
